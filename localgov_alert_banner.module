<?php

/**
 * @file
 * Contains localgov_alert_banner.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function localgov_alert_banner_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the localgov_alert_banner module.
    case 'help.page.localgov_alert_banner':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Alert Banner Support module') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function localgov_alert_banner_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    // Move localgov alert banner to last hook.
    unset($implementations['localgov_alert_banner']);
    $implementations['localgov_alert_banner'] = NULL;
  }
}

/**
 * Implements hook_entity_build_defaults_alter().
 */
function localgov_alert_banner_entity_build_defaults_alter(array &$build, EntityInterface $entity, $view_mode) {

  // ECK entities don't implement getType()
  if ($entity->bundle() == 'localgov_alert_banner') {

    // Set a cache context based on the hide alert banner cookie token.
    $build['#cache']['contexts'][] = 'cookies:hide-alert-banner-token';
    $build['#cache']['contexts'][] = 'user.roles:anonymous';
    $build['#cache']['contexts'][] = 'session';

    // Set a cache context based on if on the front page.
    $build['#cache']['contexts'][] = 'url.path:is_front';

    // Get token and use as a cache tag.
    $token = \Drupal::service('localgov_alert_banner.state')->getToken();
    $build['#cache']['tags'][] = 'localgov.alert.banner.token:' . $token;

    // We need to switch off (static) page cache here for individual anon users.
    // They still get the dynamic page cache, handled by the cache contexts.
    // Should be a better way of handling this?
    // \Drupal::service('page_cache_kill_switch')->trigger();
  }
}

/**
 * Implements hook_preprocess_localgov_alert_banner().
 */
function localgov_alert_banner_preprocess(&$variables) {

  if (isset($variables['elements']['localgov_alert_banner'])) {

    // Get token.
    $token = \Drupal::service('localgov_alert_banner.state')->getToken();

    // Add a hidden class.
    $variables['attributes']['class'][] = 'hidden';

    // Token as attribute.
    $variables['attributes']['data-dismiss-alert-token'] = $token;

    // Ensure token is accessible by javascript.
    $variables['#attached']['drupalSettings']['localgov_alert_banner']['token'] = $token;

  }
}

/**
 * Implements hook_alert_banner_create().
 */
function localgov_alert_banner_alert_banner_create(EntityInterface $entity) {
  _localgov_alert_banner_alert_banner_save($entity);
}

/**
 * Implements hook_alert_banner_update().
 */
function localgov_alert_banner_alert_banner_update(EntityInterface $entity) {
  _localgov_alert_banner_alert_banner_save($entity);
}

/**
 * Common function when alert banner entity saved.
 */
function _localgov_alert_banner_alert_banner_save(EntityInterface $entity) {

  // Check if the entity is flagged as live.
  $flag = \Drupal::service('flag')->getFlagById('set_live');
  if (!empty($flag)) {
    $flaggings = \Drupal::service('flag')->getEntityFlaggings($flag, $entity);

    if (!empty($flaggings)) {

      // Regenerate a JS token for the updated alert banner.
      \Drupal::service('localgov_alert_banner.state')->generateToken($entity)->save();
    }
  }

  // Better to use cache tags instead of doing a full flush?
  drupal_flush_all_caches();
}

/**
 * Implements hook_form_alter().
 */
function localgov_alert_banner_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Edit the alert banner entity form on the creation or edit mode.
  if ($form_id == 'localgov_alert_banner_localgov_alert_banner_add_form' || $form_id == 'localgov_alert_banner_localgov_alert_banner_edit_form') {

    // Create the vertical tabs like on node edit forms.
    // @src https://drupal.stackexchange.com/a/276907
    $form['#theme'][] = 'node_edit_form';
    $form['#attached']['library'] = ['node/drupal.node'];
    $form['advanced'] = [
      '#type' => 'container',
      '#weight' => 99,
      '#attributes' => [
        'class' => ['entity-meta'],
      ],
    ];

    // Support Elbow room module if it's installed.
    $module_handler = \Drupal::service('module_handler');
    if ($module_handler->moduleExists('elbow_room')) {
      $form['#attached']['library'][] = 'elbow_room/base';
      $elbowRoomConfig = Drupal::configFactory()->get('elbow_room.settings');
      $form['#attached']['drupalSettings']['elbow_room']['default'] = $elbowRoomConfig->get('default');

      // Add node form classes for elbow room to function.
      $form['#attributes']['class'][] = 'node-form';
    }

    // Alert details group.
    $form['alert_details'] = [
      '#type' => 'fieldset',
      '#title' => t('Alert details'),
      '#open' => TRUE,
      '#weight' => -5,
    ];
    $form['field_alert_type_of_alert']['#group'] = 'alert_details';
    $form['title']['#group'] = 'alert_details';
    $form['field_alert_short_description']['#group'] = 'alert_details';

    // Set authoring information into sidebar.
    $form['author'] = [
      '#type' => 'details',
      '#title' => t('Authoring information'),
      '#group' => 'advanced',
      '#weight' => 90,
      '#optional' => 1,
      '#open' => TRUE,
      '#attributes' => [
        'class' => ['entity-form-author'],
      ],
    ];

    // Move the authoring info into sidebar like nodes.
    $form['uid']['#group'] = 'author';
    $form['created']['#group'] = 'author';
    $form['revision_log_message']['#group'] = 'author';

    // Move new revision into author group.
    $form['new_revision']['#group'] = 'author';

    // Change the Title label.
    unset($form['title']['widget'][0]['value']['#description']);

    // Change the Link text description.
    $form['field_alert_link']['widget'][0]['title']['#description'] = t("If you don't write anything here, we will use: More information");

    // @TODO Set publishing options group.
    /*
    $form['publishing_options'] = [
    '#type' => 'details',
    '#title' => t('Publishing options.'),
    '#group' => 'advanced',
    '#weight' => 10,
    '#optional' => 1,
    '#open' => TRUE,
    '#attributes' => [
    'class' => ['entity-form-publishing'],
    ],
    ];*/

    // @TEMP Set the flags details group to open and change title
    $form['flag']['#open'] = TRUE;
    $form['flag']['#title'] = t('Publishing options');

    // Move publihsing options into sidebar like nodes.
    $form['display_title']['#group'] = 'flag';
    $form['remove_hide_link']['#group'] = 'flag';
    $form['status']['#group'] = 'flag';

    // @TEMP unset publish field (to replace flag).
    unset($form['status']);

    // Change put live description.
    $form['flag']['set_live']['#description'] = t('Tick this box to put the banner on our website.') . '<br>' . t('Untick this box if you want to remove the banner from the website.');

  }
}

/**
 * Implements hook_theme().
 */
function localgov_alert_banner_theme() {
  $theme = [];
  $theme['localgov_alert_banner'] = [
    'render element' => 'elements',
    'file' => 'localgov_alert_banner.page.inc',
    'template' => 'localgov_alert_banner',
  ];
  $theme['localgov_alert_banner_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'localgov_alert_banner.page.inc',
  ];
  return $theme;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function localgov_alert_banner_theme_suggestions_localgov_alert_banner(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#localgov_alert_banner'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'localgov_alert_banner__' . $sanitized_view_mode;
  $suggestions[] = 'localgov_alert_banner__' . $entity->bundle();
  $suggestions[] = 'localgov_alert_banner__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'localgov_alert_banner__' . $entity->id();
  $suggestions[] = 'localgov_alert_banner__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}
