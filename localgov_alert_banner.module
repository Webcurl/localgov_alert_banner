<?php

/**
 * @file
 * Contains localgov_alert_banner.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function localgov_alert_banner_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the localgov_alert_banner module.
    case 'help.page.localgov_alert_banner':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Alert Banner Support module') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements HOOK_module_implements_alter
 */
function localgov_alert_banner_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    // Move localgov alert banner to last hook
    unset($implementations['localgov_alert_banner']);
    $implementations['localgov_alert_banner'] = null;
  }
}

/**
 * Implements HOOK_entity_build_defaults_alter
 */
function localgov_alert_banner_entity_build_defaults_alter(array &$build, \Drupal\Core\Entity\EntityInterface $entity, $view_mode) {

  // ECK entities don't implement getType()
  if ($entity->bundle() == 'localgov_alert_banner') {

    // Set a cache context based on the hide alert banner cookie token
    $build['#cache']['contexts'][] = 'cookies:hide-alert-banner-token';
    $build['#cache']['contexts'][] = 'user.roles:anonymous';
    $build['#cache']['contexts'][] = 'session';

    // Set a cache context based on if on the front page
    $build['#cache']['contexts'][] = 'url.path:is_front';

    // Get token and use as a cache tag
    $token = \Drupal::service('localgov_alert_banner.state')->getToken();
    $build['#cache']['tags'][] = 'localgov.alert.banner.token:'.$token;

    // We need to switch off (static) page cache here for individual anon users.
    // They still get the dynamic page cache, handled by the cache contexts.
    // Should be a better way of handling this?
    // \Drupal::service('page_cache_kill_switch')->trigger();
  }
}

/**
 * Implements HOOK_preprocess_eck_entity
 */
function localgov_alert_banner_preprocess(&$variables) {

  if (isset($variables['elements']['localgov_alert_banner'])) {

    // Get token
    $token = \Drupal::service('localgov_alert_banner.state')->getToken();

    // Get cookie
    $cookie = \Drupal::request()->cookies->get('hide-alert-banner-token');

    // Add a hidden class
    $variables['attributes']['class'][] = 'hidden';

    // Token as attribute
    $variables['attributes']['data-dismiss-alert-token'] = $token;

    // Ensure token is accessible by javascript.
    $variables['#attached']['drupalSettings']['localgov_alert_banner']['token'] = $token;

  }
}

/**
 * Implements HOOK_alert_banner_create
 */
function localgov_alert_banner_alert_banner_create(Drupal\Core\Entity\EntityInterface $entity) {
  _localgov_alert_banner_alert_banner_save($entity);
}

/**
 * Implements HOOK_alert_banner_update
 */
function localgov_alert_banner_alert_banner_update(Drupal\Core\Entity\EntityInterface $entity) {
  _localgov_alert_banner_alert_banner_save($entity);
}

/**
 * Common function when alert banner entity saved
 */
function _localgov_alert_banner_alert_banner_save(Drupal\Core\Entity\EntityInterface $entity) {

  // Check if the entity is flagged as live
  $flag = \Drupal::service('flag')->getFlagById('set_live');
  if (!empty($flag))  {
    $flaggings = \Drupal::service('flag')->getEntityFlaggings($flag, $entity);

    if (!empty($flaggings)) {

      // Regenerate a JS token for the updated alert banner
      \Drupal::service('localgov_alert_banner.state')->generateToken($entity)->save();
    }
  }

  // Better to use cache tags instead of doing a full flush?
  drupal_flush_all_caches();
}

/**
 * Implements HOOK_form_alter
 */
function localgov_alert_banner_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  // Edit the alert banner entity form on the creation or edit mode
  if ($form_id == 'localgov_alert_banner_localgov_alert_banner_add_form' || $form_id == 'localgov_alert_banner_localgov_alert_banner_edit_form') {

    // Create the vertical tabs like on node edit forms
    // @src https://drupal.stackexchange.com/a/276907
    $form['#theme'][] = 'node_edit_form';
    $form['#attached']['library'] = ['node/drupal.node'];
    $form['advanced'] = [
      '#type' => 'container',
      '#weight' => 99,
      '#attributes' => [
        'class' => ['entity-meta'],
      ],
    ];

    // Support Elbow room module if it's installed.
    $module_handler = \Drupal::service('module_handler');
    if ($module_handler->moduleExists('elbow_room')) {
      $form['#attached']['library'][] = 'elbow_room/base';
      $elbowRoomConfig = Drupal::configFactory()->get('elbow_room.settings');
      $form['#attached']['drupalSettings']['elbow_room']['default'] = $elbowRoomConfig->get('default');

      // Add node form classes for elbow room to function
      $form['#attributes']['class'][] = 'node-form';
    }

    // Alert details group
    $form['alert_details'] = [
      '#type' => 'fieldset',
      '#title' => t('Alert details'),
      '#open' => true,
      '#weight' => -5,
    ];
    $form['alert_type']['#group'] = 'alert_details';
    $form['title']['#group'] = 'alert_details';
    $form['short_description']['#group'] = 'alert_details';

    $form['remove_hide_link']['#group'] = 'alert_details';

    // Set authoring information into sidebar
    $form['author'] = [
      '#type' => 'details',
      '#title' => t('Authoring information'),
      '#group' => 'advanced',
      '#weight' => 90,
      '#optional' => 1,
      '#open' => true,
      '#attributes' => [
        'class' => ['entity-form-author'],
      ],
    ];

    // Move the authoring info into sidebar like nodes
    $form['user_id']['#group'] = 'author';
    $form['created']['#group'] = 'author';
    $form['revision_log_message']['#group'] = 'author';

    // Move new revision into author group.
    $form['new_revision']['#group'] = 'author';

    // Change the Title label
    unset($form['title']['widget'][0]['value']['#description']);

    // Change the Link text description
    $form['link']['widget'][0]['title']['#description'] = t("If you don't write anything here, we will use: More information");

    // Set the flags details group to open and change title
    $form['flag']['#open'] = true;
    $form['flag']['#title'] = t('Publishing options');

    // Change put live description
    $form['flag']['set_live']['#description'] = t('Tick this box to put the banner on our website.').'<br>'.t('Untick this box if you want to remove the banner from the website.');
  }
}

/**
 * Implements hook_uninstall()
 */
function localgov_alert_banner_uninstall() {

  // Remove configuration
  $configs = array(
    "block.block.views_block__alert_banner_alert_banner_block",
    "core.entity_form_display.alert_banner.alert_banner.default",
    "core.entity_view_display.alert_banner.alert_banner.default",
    "flag.flag.set_live",
    "system.action.flag_action.set_live_flag",
    "system.action.flag_action.set_live_unflag",
    "user.role.emergency_publisher",
    "views.view.alert_banner"
  );
  foreach($configs as $config) {
    \Drupal::configFactory()->getEditable($config)->delete();
  }

  // Remove custom entity
  $entity_update_manager = \Drupal::entityDefinitionUpdateManager();
  $entity_type = $entity_update_manager->getEntityType('localgov_alert_banner');
  $entity_update_manager->uninstallEntityType($entity_type);

}
